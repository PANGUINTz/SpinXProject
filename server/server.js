import express from 'express';
import connect from './databased/database.js';
import cors from 'cors'
import multer from 'multer';
import bodyParser from 'body-parser';
import UserModel from './model/User.model.js';
import ProductModel from './model/Product.model.js';
import bcrypt from 'bcrypt'
import jwt from "jsonwebtoken";
import env from './config.js' 
import { ObjectId } from "mongodb";

import CouponModel from './model/Coupon.model.js';



const app = express();

//middlewared
app.use(express.json());
app.use(cors())
app.disable('x-powered-by')
app.use(bodyParser.urlencoded({limit: "50mb", extended: true, parameterLimit:50000}));

app.use('/uploads', express.static('uploads'))


let storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './uploads/')
    },
})

const upload = multer({storage: storage });


const port = process.env.PORT || 8080;

app.get('/', (req, res) => {
    res.send("Home Get Request").status(201);
})

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Register //////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/register', async(req,res) => {
    const {username, password, email, firstName, lastName, tel, rePassword, role, coupons} = req.body;
    const existUser = await UserModel.findOne({username})
    const existEmail = await UserModel.findOne({email})

    try {

        if(username === "") {
            return res.status(501).send({error: "Required"})
        }
        if(password === "") {
            return res.status(501).send({error: "Required"})
        }
        if(email === "") {
            return res.status(501).send({error: "Required"})
        }
        if(firstName === "") {
            return res.status(501).send({error: "Required"})
        }
        if(lastName === "") {
            return res.status(501).send({error: "Required"})
        }
        if(tel === "") {
            return res.status(501).send({error: "Required"})
        }

        if(password !== rePassword) {
            return res.status(501).send({error: "Password is not match"})
        }

        if(existEmail && existUser) {
            return res.status(501).send({error: "Email and user already exist"})
        }
        if(existEmail) {
            return res.status(501).send({error: "Email already exist"})
        } 
        if(existUser) {
            return res.status(501).send({error: "User already exist"})
        }

        const hashedPassword = await bcrypt.hash(password, 10);
    
        if(!existUser && !existEmail) {
            const user = await new UserModel({
                username,
                password: hashedPassword,
                email,
                firstName,
                lastName,
                tel,
                role: role || "user",
                coupons: []
            })
            user.save()
            .then(() => {
                return res.send({msg: "Register Successfully"}).status(201); 
            }) 
            .catch(() => {
                return res.send({error: "Register Failed"}).status(501);
            })
        }
    } catch (error) {
        console.log(error);
        return res.send(error).status(500);
    }
})

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Login  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/login', async(req,res) => {
    const {username, password} = req.body;
    try {
        if(username === "") {
            return res.status(501).send({error: "Required"})
        }
        if(password === "") {
            return res.status(501).send({error: "Required"})
        }

        const checkUser =  await UserModel.findOne({username})
    
        if(!checkUser) {
            return res.status(404).send({error: "Don't have User"})
        }
    
        const passwordCheck = await bcrypt.compare(password, checkUser.password)
        if(!passwordCheck) {
            return res.status(401).send({error: "Wrong Password"})
        }
    
        const token = jwt.sign({
            username: checkUser.username,
            role: checkUser.role
        },
            env.JWT_SECRET,{expiresIn: "24h"
        })
            return res.status(201).send({msg: "Login Successfully",username: checkUser.username, role: checkUser.role, token})
        } catch (error) {
            return res.status(200).send({error})
        }
    }
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   changePassword  ///////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/changePassword/:id', async(req, res) => {
    const {username, password, newPassword, cnewPassword} = req.body
    const {id} = req.params

    const checkUser =  await UserModel.findOne({username})

    if(!checkUser) {
        return res.status(404).send({error: "Don't have User"})
    }

    if(password === "") {
        return res.status(501).send({error: "Required"})
    }

    if(newPassword === "") {
        return res.status(501).send({error: "Required"})
    }

    if(cnewPassword === "") {
        return res.status(501).send({error: "Required"})
    }

    const passwordCheck = await bcrypt.compare(password, checkUser.password)
    if(!passwordCheck) {
        return res.status(401).send({error: "รหัสผ่านผิด"})
    }

    if(password === newPassword) {
        return res.status(501).send({error: "กรุณาอย่าใช้รหัสผ่านเดิม"})
    }

    if(newPassword !== cnewPassword) {
        return res.status(501).send({error: "รหัสผ่านไม่เหมือนกัน"})
    }

    if(newPassword.length < 8 ) {
        return res.status(404).send({error: "รหัสผ่านควรตั้งมากกว่า8ขึ้นไป"})
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    await UserModel.updateOne(
        { _id: new ObjectId(id)}, {$set: { password: hashedPassword}
    })
    .then(() => {
        return res.status(201).send({msg: "Update Successfully"})
    })
    .catch(() => {
        return res.status(404).send({error: "Failed to Updated"})
    })
})



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  Forget Password  ///////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.put('/forgetPassword/:id', async(req, res) => {
    const { email, password, rePassword } = req.body
    const { id } = req.params;

    const emailData = await UserModel.findOne({email})

    if(email === '' && password === '')  {
        return res.status(404).send({error: "กรุณากรอกอีเมลล์และรหัสผ่านที่คุณต้องการจะเปลี่ยน"})
    }

    if(email === '') {
        return res.status(404).send({error: "กรุณากรอกอีเมลล์"})
    }
    if(!emailData) {
        return res.status(404).send({error: "ไม่มีอีเมลล์นี้ในการสมัคร"})
    }
    
    if(password === '') {
        return res.status(404).send({error: "กรุณากรอกรหัสผ่าน"})
    }

    if(password.length < 8 ) {
        return res.status(404).send({error: "รหัสผ่านควรตั้งมากกว่า8ขึ้นไป"})
    }

    if(password !== rePassword) {
        return res.status(404).send({error: "รหัสผ่านไม่ตรงกัน"})
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await UserModel.updateOne(
        { _id: new ObjectId(id)}, {$set: { password: hashedPassword}
    })
    .then(() => {
        return res.status(201).send({msg: "Update Successfully"})
    })
    .catch(() => {
        return res.status(404).send({error: "Failed to Updated"})
    })
})

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  getUser by Email ///////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/getUserEmail', async(req, res) => {
    const {email} = req.body
    try {
        const userData = await UserModel.findOne({email})
        return res.status(201).send(userData)
    } catch (error) {
        return error
    }
})



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   GetUser ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/getUser',async(req, res) =>{
    try {
        const token = req.headers.authorization.split(' ')[1];
        var decodedToken = jwt.verify(token, env.JWT_SECRET);
        return res.status(201).send({msg: "authentificate", decodedToken})
    } catch (error) {
        return error
    }
}) 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   GetUserID /////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/getUserID',async(req, res) =>{
    const {username} = req.body
    try {
        const userData = await UserModel.findOne({username})
        return res.status(201).send(userData)
    } catch (error) {
        return error
    }
}) 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   GetAllUser ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app.get('/allUser', async(req, res) => {
    const result = await UserModel.find({role: {$in:["vip","user", ""]}});
    return res.send(result);
}) 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   AddUserCoupon ////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/userCoupon/:id', async(req, res) => {

    //CouponId
    const { coupons } = req.body

    //UserId
    const {id} = req.params
    
    const user = await UserModel.findById(id)
    const coupon = await CouponModel.findById(coupons)

    if(!user) {
        return res.status(501).send({error: "don't have user"})
    }

   if(!coupon.usedBy.includes(id)) {
        const result = await UserModel.updateOne(
            { _id: new ObjectId(id)}, { $addToSet: { coupons: coupons }}
        )    
        if(result.modifiedCount===0) {
            return res.status(501).send({ error: "คูปองนี้มีอยู่แล้ว" });
        }
    return res.status(201).send({ message: "เพิ่มคูปองสำเร็จ" });
   } else {
    return res.status(501).send({error: "คูปองนี้ใช้ไปแล้ว"})
   }
})




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Role Admin  /////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.get('/getAdmin', async(req, res) => {
    const userRole = await UserModel.find({role: "admin"})
    return res.send(userRole);
}) 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Delete User ////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.delete('/deleteUser/:id', async(req, res) => {
    const { id } = req.params
    const result = await UserModel.deleteOne({_id: new ObjectId(id)})
    if (result.deletedCount === 0) {
        return res.status(404).send({ error: 'Users not found' });
    }
    return res.send({ msg: 'Delete Successfully' });
})  

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Update User //////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.put('/updateUser/:id', async(req, res) => {

    const { id } = req.params
    const { password, email, firstName, lastName, tel, role} = req.body;

    if(password === "") {
        return res.status(501).send({error: "Required"})
    }

    if(email === "") {
        return res.status(501).send({error: "Required"})
    }

    if(firstName === "") {
        return res.status(501).send({error: "Required"})
    }

    if(lastName === "") {
        return res.status(501).send({error: "Required"})
    }
    if(tel === "") {
        return res.status(501).send({error: "Required"})
    }

    if(role === "") {
        return res.status(501).send({error: "Required"})
    }

    const emailExist =  await UserModel.findOne({email})
    if(emailExist) {
        return res.status(404).send({error: "มีอีเมลที่ใช้อยู่แล้ว"})
    }

    await UserModel.updateOne(
        { _id: new ObjectId(id)}, {$set: { password, email, firstName, lastName, tel, role}
    })
    .then(() => {
        return res.status(201).send({msg: "Update Successfully"})
    })
    .catch(() => {
        return res.status(404).send({error: "Failed to Updated"})
    })
}) 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Add product  //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.post('/addProduct', upload.single('product_img'), async(req, res) =>{

    const {product_name, price, categories, description, product_brand, bestSeller} = req.body;

    console.log(req.file);

    if(req.file===undefined) {
        return res.status(501).send({error: "Required"})
    }

    if(product_name === "") {
        return res.status(501).send({error: "Required"})
    }

    if(categories === "") {
        return res.status(501).send({error: "Required"})
    }


    if(price === 0 && price === "") {
        return res.status(501).send({error: "Required"})
    }

    const existProduct = await ProductModel.findOne({product_name})
    if(existProduct) {
        return res.status(501).send({error: "This Name Product is Exist"})
    }


    if((product_name !== ""  && !existProduct) && (price !== 0 && price !== "")) {
        const Product = await ProductModel.create({
            product_name: product_name,
            price: price,
            categories: categories || "",
            product_brand: product_brand || "",
            description: description || "",
            product_img: req.file.path,
            bestSeller: bestSeller
        })
        Product.save()
        .then((result) => {
            return res.send({msg: "Add Product Successfully"}).status(201); 
        }) 
        .catch(() => {
            return res.send({error: "Add Product Failed"}).status(501);
        })
    }
}) 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Update Product ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.put('/updateProduct/:id', upload.single('productImage'),async(req, res) => {
    const { id } = req.params
    const {product_name, price, categories, description, product_brand, bestSeller} = req.body;

    console.log(req.file);

    const updateProduct = {}

    if(req.file===undefined) {
        console.log(req.file);
    } 
    else {
        console.log(req.file);
        updateProduct.product_img = req.file.path
    }
    
    if(product_name === "") {
        return res.status(501).send({error: "Required"})
    }
    else {
        updateProduct.product_name = product_name
    }

    if(description === "") {
        return res.status(501).send({error: "Required"})
    }
    else {
        updateProduct.description = description
    }

    if(price === "") {
        return res.status(501).send({error: "Required"})
    }
    else {
        updateProduct.price = price
    }

    if(categories === "") {
        return res.status(501).send({error: "Required"})
    }
    else {
        updateProduct.categories = categories
    }

    if(product_brand === "") {
        return res.status(501).send({error: "Required"})
    }
    else {
        updateProduct.product_brand = product_brand
    }

    if(bestSeller ==="") {
        return res.status(501).send({error: "Required"})
    } else {
        updateProduct.bestSeller = bestSeller
    }


    await ProductModel.findByIdAndUpdate( id, updateProduct, {new: true})
    .then(() => {
        return res.status(201).send({msg: "Update Successfully"})
    })
    .catch(() => {
        return res.status(404).send({error: "Failed to Updated"})
    })
}) 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   Delete product ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.delete('/deleteProduct/:id',async(req, res) => {
    const { id } = req.params
    const result = await ProductModel.deleteOne({_id: new ObjectId(id)})
    if (result.deletedCount === 0) {
        return res.status(404).send({ error: 'Product not found' });
    }
    return res.send({ msg: 'Delete Successfully' });
}) 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  Get All Product ////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.get('/getProduct',async (req, res) => {
    const result = await ProductModel.find()
    return res.send(result);
}
) 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  Get Best Product ///////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.get('/getBestProduct', async(req, res) => {
    const bestSeller = await ProductModel.find({bestSeller: "true"})
    return res.send(bestSeller);
}) 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  ADD COUPON  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.post('/addCoupon',upload.single('coupon_img'), async(req, res) => {

    const{coupon_name, description, discount} = req.body 

    if(coupon_name === "") {
        return res.status(404).send({msg: "required"})
    }


    if(discount === 0)  {
        return res.status(404).send({msg: "required"})
    }

    const existCoupon = await CouponModel.findOne({coupon_name})

    if(existCoupon) {
        return res.status(404).send({msg: "Coupon Exist"})
    }


    if(!existCoupon) {
        const Coupon = await CouponModel.create({
            coupon_name: coupon_name,
            description: description,
            discount: discount,
            coupon_img: req.file.path,
        })

        Coupon.save()
        .then((result) => {
            return res.send({msg: "Add Coupon Successfully"}).status(201); 
        }) 
        .catch((error) => {
            return res.send({error: "Add Coupon Failed"}).status(501);
        })
    }

})


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  DELETE COUPON  /////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.delete('/deleteCoupon/:id',async(req ,res) => {
    const {id} = req.params

    const result =  await CouponModel.deleteOne({_id: new ObjectId(id)})
    if (result.deletedCount === 0) {
        return res.status(404).send({ error: 'Product not found' });
    } else {
        return res.send({ msg: 'Delete Successfully' });
    }
})


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////  GET COUPON  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.get('/getCoupon',async(req ,res) => {
    const result =  await CouponModel.find({})
    return res.send(result)
})

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////   GetCouponByID ////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.get('/getCouponByUser/:id',async(req ,res) => {
    const {id} = req.params
    const result = await UserModel.findById(id).populate('coupons')
    return res.send(result.coupons)
})

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////// User Use Coupon ////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

app.put('/usedCoupon/:userId/:couponId' , async(req, res) => {
    const {userId, couponId} = req.params;
    
    const usedCoupon = await CouponModel.updateOne(
        { _id: new ObjectId(couponId)}, { $addToSet: { usedBy: userId }}
    )

    if(usedCoupon.modifiedCount===1) {
        await UserModel.findByIdAndUpdate(userId, { $pull: { coupons: couponId } });
        return res.status(202).send({msg: "ใช้คูปองสำเร็จ"})
    } else {
        return res.status(502).send({error: "ใช้คูปองไปแล้ว"})
    }
})


connect().then(() => {
    app.listen(port, ()=> {
        console.log(`Server running port at ${port}`);
    })
}).catch(error => {
    console.log("Invalid database conntection");
})






